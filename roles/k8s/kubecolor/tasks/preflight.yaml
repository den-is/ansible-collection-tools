- name: Check if binary already exists
  ansible.builtin.shell: 'command -v {{ kubecolor_bin }}'
  register: kubecolor_bin_exists
  ignore_errors: true
  changed_when: false

- name: Get installed version if any
  ansible.builtin.shell: kubecolor --kubecolor-version | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+"
  register: check_kubecolor_v_task
  ignore_errors: true
  changed_when: false

- name: Registering pre-flight vars
  ansible.builtin.set_fact:
    installed_kubecolor_v: "{{ check_kubecolor_v_task.stdout | default('0.0.0', true) }}"

- name: Reporting installed version
  ansible.builtin.debug:
    msg: 'Current version: {{ installed_kubecolor_v if check_kubecolor_v_task is success else "Not Found" }}'

- name: Get kubecolor checksums
  when:
  - kubecolor_v is version(installed_kubecolor_v, 'ne')
  - not kubecolor_brew
  block:

  - name: Registering checksums related vars
    ansible.builtin.set_fact:
      __checksums_url: https://github.com/kubecolor/kubecolor/releases/download/v{{ kubecolor_v }}/checksums.txt
      __github_api_headers: "{{ {'GITHUB_TOKEN': lookup('ansible.builtin.env', 'GITHUB_TOKEN')} if (lookup('ansible.builtin.env', 'GITHUB_TOKEN')) else {} }}"

  # on macos ansible host may require "export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES"
  - name: Get checksums list
    ansible.builtin.set_fact:
      __kubecolor_checksums: "{{ lookup('url', __checksums_url, headers=__github_api_headers, wantlist=True) | list }}"
    run_once: true
    until: __kubecolor_checksums is ansible.builtin.search('linux_' + kubecolor_arch + '.tar.gz')
    retries: 10

  - name: Get checksum for {{ kubecolor_arch }}
    ansible.builtin.set_fact:
      __kubecolor_checksum: "{{ item.split(' ')[0] }}"
    loop: "{{ __kubecolor_checksums }}"
    when:
    - "('linux_' + kubecolor_arch + '.tar.gz') in item"
